The files in this directory handles setting up and running an amara
development environment using docker.

SETUP:

We run a docker container for each of the services needed for amara (mysql,
rabbitmq, etc).  Then run a docker container to handle things like management
commands, testing, etc.

STARTING SERVICES

The first step to using the docker dev environment is always starting the
services.  The first time this runs, we will need to build all the images
which will take a while:

./startup.py


Notes:
  - You will either need to run these scripts as root, or add your user to the
    docker group.  (Read the Why Sudo? section in
    http://docs.docker.io/en/latest/use/basics/ for more info)

  - After restarting the host machine, you may need to restart the docker
    network with:

    sudo sh reset-docker-network.sh

RUNNING A TEST SERVER:

In one terminal, start the celery worker:

./worker.py

In another terminar, start the webserver:

./runserver.py

RUNNING DJANGO MANAGEMENT

./manage.py command [args]

RUNNING TESTS:

./test.py [args]

STOPPING SERVICES:

./shutdown.py

SERVICES:

We set up several docker images/containers to provide services for the dev
envonment.  Here's some details about them:

* amara-dev-mysql
  port: 51000
  user: "root"
  password: ""

* amara-dev-solr
  port: 51001

* amara-dev-rabbitmq:
  port: 51002

* amara-dev-memcached:
  port: 51003
